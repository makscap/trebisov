{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.function.bind.js\";\nimport '../../vendor/polyfills/Event'; // addEventListener and event.target normaliziation\nimport '../../vendor/polyfills/Function/prototype/bind';\nvar KEY_SPACE = 32;\nvar DEBOUNCE_TIMEOUT_IN_SECONDS = 1;\nfunction Button($module) {\n  this.$module = $module;\n  this.debounceFormSubmitTimer = null;\n}\n\n/**\n* JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n*\n* Created since some Assistive Technologies (for example some Screenreaders)\n* will tell a user to press space on a 'button', so this functionality needs to be shimmed\n* See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n*\n* @param {object} event event\n*/\nButton.prototype.handleKeyDown = function (event) {\n  // get the target element\n  var target = event.target;\n  // if the element has a role='button' and the pressed key is a space, we'll simulate a click\n  if (target.getAttribute('role') === 'button' && event.keyCode === KEY_SPACE) {\n    event.preventDefault();\n    // trigger the target's click event\n    target.click();\n  }\n};\n\n/**\n* If the click quickly succeeds a previous click then nothing will happen.\n* This stops people accidentally causing multiple form submissions by\n* double clicking buttons.\n*/\nButton.prototype.debounce = function (event) {\n  var target = event.target;\n  // Check the button that is clicked on has the preventDoubleClick feature enabled\n  if (target.getAttribute('data-prevent-double-click') !== 'true') {\n    return;\n  }\n\n  // If the timer is still running then we want to prevent the click from submitting the form\n  if (this.debounceFormSubmitTimer) {\n    event.preventDefault();\n    return false;\n  }\n  this.debounceFormSubmitTimer = setTimeout(function () {\n    this.debounceFormSubmitTimer = null;\n  }.bind(this), DEBOUNCE_TIMEOUT_IN_SECONDS * 1000);\n};\n\n/**\n* Initialise an event listener for keydown at document level\n* this will help listening for later inserted elements with a role=\"button\"\n*/\nButton.prototype.init = function () {\n  this.$module.addEventListener('keydown', this.handleKeyDown);\n  this.$module.addEventListener('click', this.debounce);\n};\nexport default Button;","map":{"version":3,"names":["KEY_SPACE","DEBOUNCE_TIMEOUT_IN_SECONDS","Button","$module","debounceFormSubmitTimer","prototype","handleKeyDown","event","target","getAttribute","keyCode","preventDefault","click","debounce","setTimeout","bind","init","addEventListener"],"sources":["/Users/Maksym/Documents/GitHub/trebisov/frontend/node_modules/@id-sk/frontend/govuk/components/button/button.js"],"sourcesContent":["import '../../vendor/polyfills/Event' // addEventListener and event.target normaliziation\nimport '../../vendor/polyfills/Function/prototype/bind'\n\nvar KEY_SPACE = 32\nvar DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\nfunction Button ($module) {\n  this.$module = $module\n  this.debounceFormSubmitTimer = null\n}\n\n/**\n* JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n*\n* Created since some Assistive Technologies (for example some Screenreaders)\n* will tell a user to press space on a 'button', so this functionality needs to be shimmed\n* See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n*\n* @param {object} event event\n*/\nButton.prototype.handleKeyDown = function (event) {\n  // get the target element\n  var target = event.target\n  // if the element has a role='button' and the pressed key is a space, we'll simulate a click\n  if (target.getAttribute('role') === 'button' && event.keyCode === KEY_SPACE) {\n    event.preventDefault()\n    // trigger the target's click event\n    target.click()\n  }\n}\n\n/**\n* If the click quickly succeeds a previous click then nothing will happen.\n* This stops people accidentally causing multiple form submissions by\n* double clicking buttons.\n*/\nButton.prototype.debounce = function (event) {\n  var target = event.target\n  // Check the button that is clicked on has the preventDoubleClick feature enabled\n  if (target.getAttribute('data-prevent-double-click') !== 'true') {\n    return\n  }\n\n  // If the timer is still running then we want to prevent the click from submitting the form\n  if (this.debounceFormSubmitTimer) {\n    event.preventDefault()\n    return false\n  }\n\n  this.debounceFormSubmitTimer = setTimeout(function () {\n    this.debounceFormSubmitTimer = null\n  }.bind(this), DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n}\n\n/**\n* Initialise an event listener for keydown at document level\n* this will help listening for later inserted elements with a role=\"button\"\n*/\nButton.prototype.init = function () {\n  this.$module.addEventListener('keydown', this.handleKeyDown)\n  this.$module.addEventListener('click', this.debounce)\n}\n\nexport default Button\n"],"mappings":";;AAAA,OAAO,8BAA8B,EAAC;AACtC,OAAO,gDAAgD;AAEvD,IAAIA,SAAS,GAAG,EAAE;AAClB,IAAIC,2BAA2B,GAAG,CAAC;AAEnC,SAASC,MAAM,CAAEC,OAAO,EAAE;EACxB,IAAI,CAACA,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,uBAAuB,GAAG,IAAI;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,MAAM,CAACG,SAAS,CAACC,aAAa,GAAG,UAAUC,KAAK,EAAE;EAChD;EACA,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;EACzB;EACA,IAAIA,MAAM,CAACC,YAAY,CAAC,MAAM,CAAC,KAAK,QAAQ,IAAIF,KAAK,CAACG,OAAO,KAAKV,SAAS,EAAE;IAC3EO,KAAK,CAACI,cAAc,EAAE;IACtB;IACAH,MAAM,CAACI,KAAK,EAAE;EAChB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAV,MAAM,CAACG,SAAS,CAACQ,QAAQ,GAAG,UAAUN,KAAK,EAAE;EAC3C,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAM;EACzB;EACA,IAAIA,MAAM,CAACC,YAAY,CAAC,2BAA2B,CAAC,KAAK,MAAM,EAAE;IAC/D;EACF;;EAEA;EACA,IAAI,IAAI,CAACL,uBAAuB,EAAE;IAChCG,KAAK,CAACI,cAAc,EAAE;IACtB,OAAO,KAAK;EACd;EAEA,IAAI,CAACP,uBAAuB,GAAGU,UAAU,CAAC,YAAY;IACpD,IAAI,CAACV,uBAAuB,GAAG,IAAI;EACrC,CAAC,CAACW,IAAI,CAAC,IAAI,CAAC,EAAEd,2BAA2B,GAAG,IAAI,CAAC;AACnD,CAAC;;AAED;AACA;AACA;AACA;AACAC,MAAM,CAACG,SAAS,CAACW,IAAI,GAAG,YAAY;EAClC,IAAI,CAACb,OAAO,CAACc,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACX,aAAa,CAAC;EAC5D,IAAI,CAACH,OAAO,CAACc,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACJ,QAAQ,CAAC;AACvD,CAAC;AAED,eAAeX,MAAM"},"metadata":{},"sourceType":"module"}
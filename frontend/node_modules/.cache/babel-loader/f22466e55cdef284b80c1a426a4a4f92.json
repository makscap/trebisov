{"ast":null,"code":"import \"core-js/modules/es.function.bind.js\";\nimport '../../vendor/polyfills/Function/prototype/bind';\nimport '../../vendor/polyfills/Event'; // addEventListener and event.target normaliziation\nimport '../../vendor/polyfills/Element/prototype/classList';\nimport { nodeListForEach } from '../../common';\nfunction Checkboxes($module) {\n  this.$module = $module;\n  this.$inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\n}\nCheckboxes.prototype.init = function () {\n  var $module = this.$module;\n  var $inputs = this.$inputs;\n\n  /**\n  * Loop over all items with [data-controls]\n  * Check if they have a matching conditional reveal\n  * If they do, assign attributes.\n  **/\n  nodeListForEach($inputs, function ($input) {\n    var controls = $input.getAttribute('data-aria-controls');\n\n    // Check if input controls anything\n    // Check if content exists, before setting attributes.\n    if (!controls || !$module.querySelector('#' + controls)) {\n      return;\n    }\n\n    // If we have content that is controlled, set attributes.\n    $input.setAttribute('aria-controls', controls);\n    $input.removeAttribute('data-aria-controls');\n    this.setAttributes($input);\n  }.bind(this));\n\n  // Handle events\n  $module.addEventListener('click', this.handleClick.bind(this));\n};\nCheckboxes.prototype.setAttributes = function ($input) {\n  var inputIsChecked = $input.checked;\n  $input.setAttribute('aria-expanded', inputIsChecked);\n  var $content = this.$module.querySelector('#' + $input.getAttribute('aria-controls'));\n  if ($content) {\n    $content.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\n  }\n};\nCheckboxes.prototype.handleClick = function (event) {\n  var $target = event.target;\n  // If a checkbox with aria-controls, handle click\n  var isCheckbox = $target.getAttribute('type') === 'checkbox';\n  var hasAriaControls = $target.getAttribute('aria-controls');\n  if (isCheckbox && hasAriaControls) {\n    this.setAttributes($target);\n  }\n};\nexport default Checkboxes;","map":{"version":3,"names":["nodeListForEach","Checkboxes","$module","$inputs","querySelectorAll","prototype","init","$input","controls","getAttribute","querySelector","setAttribute","removeAttribute","setAttributes","bind","addEventListener","handleClick","inputIsChecked","checked","$content","classList","toggle","event","$target","target","isCheckbox","hasAriaControls"],"sources":["/Users/Maksym/Documents/GitHub/trebisov/frontend/node_modules/@id-sk/frontend/govuk/components/checkboxes/checkboxes.js"],"sourcesContent":["import '../../vendor/polyfills/Function/prototype/bind'\nimport '../../vendor/polyfills/Event' // addEventListener and event.target normaliziation\nimport '../../vendor/polyfills/Element/prototype/classList'\nimport { nodeListForEach } from '../../common'\n\nfunction Checkboxes ($module) {\n  this.$module = $module\n  this.$inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n}\n\nCheckboxes.prototype.init = function () {\n  var $module = this.$module\n  var $inputs = this.$inputs\n\n  /**\n  * Loop over all items with [data-controls]\n  * Check if they have a matching conditional reveal\n  * If they do, assign attributes.\n  **/\n  nodeListForEach($inputs, function ($input) {\n    var controls = $input.getAttribute('data-aria-controls')\n\n    // Check if input controls anything\n    // Check if content exists, before setting attributes.\n    if (!controls || !$module.querySelector('#' + controls)) {\n      return\n    }\n\n    // If we have content that is controlled, set attributes.\n    $input.setAttribute('aria-controls', controls)\n    $input.removeAttribute('data-aria-controls')\n    this.setAttributes($input)\n  }.bind(this))\n\n  // Handle events\n  $module.addEventListener('click', this.handleClick.bind(this))\n}\n\nCheckboxes.prototype.setAttributes = function ($input) {\n  var inputIsChecked = $input.checked\n  $input.setAttribute('aria-expanded', inputIsChecked)\n\n  var $content = this.$module.querySelector('#' + $input.getAttribute('aria-controls'))\n  if ($content) {\n    $content.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked)\n  }\n}\n\nCheckboxes.prototype.handleClick = function (event) {\n  var $target = event.target\n  // If a checkbox with aria-controls, handle click\n  var isCheckbox = $target.getAttribute('type') === 'checkbox'\n  var hasAriaControls = $target.getAttribute('aria-controls')\n  if (isCheckbox && hasAriaControls) {\n    this.setAttributes($target)\n  }\n}\n\nexport default Checkboxes\n"],"mappings":";AAAA,OAAO,gDAAgD;AACvD,OAAO,8BAA8B,EAAC;AACtC,OAAO,oDAAoD;AAC3D,SAASA,eAAe,QAAQ,cAAc;AAE9C,SAASC,UAAU,CAAEC,OAAO,EAAE;EAC5B,IAAI,CAACA,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,OAAO,GAAGD,OAAO,CAACE,gBAAgB,CAAC,wBAAwB,CAAC;AACnE;AAEAH,UAAU,CAACI,SAAS,CAACC,IAAI,GAAG,YAAY;EACtC,IAAIJ,OAAO,GAAG,IAAI,CAACA,OAAO;EAC1B,IAAIC,OAAO,GAAG,IAAI,CAACA,OAAO;;EAE1B;AACF;AACA;AACA;AACA;EACEH,eAAe,CAACG,OAAO,EAAE,UAAUI,MAAM,EAAE;IACzC,IAAIC,QAAQ,GAAGD,MAAM,CAACE,YAAY,CAAC,oBAAoB,CAAC;;IAExD;IACA;IACA,IAAI,CAACD,QAAQ,IAAI,CAACN,OAAO,CAACQ,aAAa,CAAC,GAAG,GAAGF,QAAQ,CAAC,EAAE;MACvD;IACF;;IAEA;IACAD,MAAM,CAACI,YAAY,CAAC,eAAe,EAAEH,QAAQ,CAAC;IAC9CD,MAAM,CAACK,eAAe,CAAC,oBAAoB,CAAC;IAC5C,IAAI,CAACC,aAAa,CAACN,MAAM,CAAC;EAC5B,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC;;EAEb;EACAZ,OAAO,CAACa,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACC,WAAW,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;AAChE,CAAC;AAEDb,UAAU,CAACI,SAAS,CAACQ,aAAa,GAAG,UAAUN,MAAM,EAAE;EACrD,IAAIU,cAAc,GAAGV,MAAM,CAACW,OAAO;EACnCX,MAAM,CAACI,YAAY,CAAC,eAAe,EAAEM,cAAc,CAAC;EAEpD,IAAIE,QAAQ,GAAG,IAAI,CAACjB,OAAO,CAACQ,aAAa,CAAC,GAAG,GAAGH,MAAM,CAACE,YAAY,CAAC,eAAe,CAAC,CAAC;EACrF,IAAIU,QAAQ,EAAE;IACZA,QAAQ,CAACC,SAAS,CAACC,MAAM,CAAC,uCAAuC,EAAE,CAACJ,cAAc,CAAC;EACrF;AACF,CAAC;AAEDhB,UAAU,CAACI,SAAS,CAACW,WAAW,GAAG,UAAUM,KAAK,EAAE;EAClD,IAAIC,OAAO,GAAGD,KAAK,CAACE,MAAM;EAC1B;EACA,IAAIC,UAAU,GAAGF,OAAO,CAACd,YAAY,CAAC,MAAM,CAAC,KAAK,UAAU;EAC5D,IAAIiB,eAAe,GAAGH,OAAO,CAACd,YAAY,CAAC,eAAe,CAAC;EAC3D,IAAIgB,UAAU,IAAIC,eAAe,EAAE;IACjC,IAAI,CAACb,aAAa,CAACU,OAAO,CAAC;EAC7B;AACF,CAAC;AAED,eAAetB,UAAU"},"metadata":{},"sourceType":"module"}